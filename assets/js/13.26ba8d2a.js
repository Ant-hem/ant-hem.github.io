(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{400:function(e,t,a){"use strict";a.r(t);var s=a(10),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"clang-static-analyzer-scan-build-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clang-static-analyzer-scan-build-setup"}},[e._v("#")]),e._v(" Clang Static Analyzer (scan-build) Setup")]),e._v(" "),a("h2",{attrs:{id:"what-is-scan-build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-scan-build"}},[e._v("#")]),e._v(" What is scan-build?")]),e._v(" "),a("p",[a("strong",[e._v("Clang Static Analyzer")]),e._v(" (also known as "),a("code",[e._v("scan-build")]),e._v(") is a source code analysis tool that finds bugs in C, C++, and Objective-C programs. The analyzer is a 100% open source tool and is part of the Clang project. Like the rest of Clang, the analyzer is implemented as a C++ library that can be used by other tools and applications.")]),e._v(" "),a("p",[e._v("One thing to be aware of is that compiling with "),a("code",[e._v("scan-build")]),e._v(" is slower than a standard compilation because it runs "),a("a",{attrs:{href:"https://clang.llvm.org/docs/analyzer/checkers.html#id27",target:"_blank",rel:"noopener noreferrer"}},[e._v("checkers"),a("OutboundLink")],1),e._v(" to analyze the code. "),a("code",[e._v("scan-build")]),e._v(" checker's strength resides in their abilities to perform control flow graph inspection path-based analysis.")]),e._v(" "),a("p",[e._v("When "),a("code",[e._v("scan-build")]),e._v(" has finished analyzing the code, it produces a sweet HTML report. This output is perfect as it shows the path has taken the analyzer to find the bug.")]),e._v(" "),a("p",[a("img",{attrs:{src:"/img/scan-build.png",alt:"img"}})]),e._v(" "),a("p",[a("em",[a("a",{attrs:{href:"https://clang-analyzer.llvm.org/annotations.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("Now that you know (almost) everything about "),a("code",[e._v("scan-build")]),e._v(", let's discover how to use it in our code-base.")]),e._v(" "),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("h3",{attrs:{id:"macos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[e._v("#")]),e._v(" MacOS")]),e._v(" "),a("p",[e._v("If one installed LLVM with brew ("),a("code",[e._v("brew install llvm")]),e._v(") scan-build will be located in the bin folder of your LLVM‚Äôs install.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("/usr/local/opt/llvm/bin/scan-build\n")])])]),a("h3",{attrs:{id:"linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[e._v("#")]),e._v(" Linux")]),e._v(" "),a("p",[e._v("Same as MacOS, scan-build should be packed with your LLVM‚Äôs install, most likely in "),a("code",[e._v("usr/local/bin")]),e._v(". If one can‚Äôt find the binary on their setup, one can directly download the binary on the "),a("a",{attrs:{href:"https://clang-analyzer.llvm.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("official website"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"build-from-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-from-source"}},[e._v("#")]),e._v(" Build From Source")]),e._v(" "),a("p",[e._v("If you prefer to directly build the tool from its source, a guide is available "),a("a",{attrs:{href:"https://clang.llvm.org/get_started.html#build",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"scan-build-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scan-build-usage"}},[e._v("#")]),e._v(" Scan-Build Usage")]),e._v(" "),a("p",[e._v("The analyzer is pretty straight forward to use. It‚Äôs a two steps process. We need to first let "),a("strong",[e._v("CMake")]),e._v(" running its magic and then build the project with the help of "),a("strong",[e._v("scan-build")]),e._v(" and "),a("strong",[e._v("make")]),e._v(".")]),e._v(" "),a("p",[a("em",[e._v("‚ö†Ô∏è  Note: From the documentation, it's still not clear if Ninja is fully supported by scan-build. However, we can still parallelize the build with make.")])]),e._v(" "),a("p",[e._v("From my experience "),a("code",[e._v("scan-build")]),e._v(" requires a full rebuild to provide an accurate output, I wrote a simple shell script performing all the necessary steps. Let's discover how it works.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/bash")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Optional: I recommend to disable CCache if you are using it.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CCACHE_DISABLE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Clean existing build directly if present.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A full rebuild is preferable to have a stable output.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf build\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Running CMake with scan-build")]),e._v("\nscan-build --use-cc"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("clang --use-c+"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v("clang++ cmake -H. -Bbuild\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Building with Make and scan-build")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -j is here to speed up a little the process by parallelizing it.")]),e._v("\nscan-build --use-cc"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("clang --use-c+"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v("clang++ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -C build -j2\n")])])]),a("p",[e._v("Running those commands will output an HTML report if "),a("code",[e._v("scan-build")]),e._v(" finds an error in your project. This report's output is configurable if you prefer to render a "),a("code",[e._v("yml")]),e._v(" or a "),a("code",[e._v("plist")]),e._v(" file.")]),e._v(" "),a("p",[e._v("üí°  "),a("em",[a("strong",[e._v("Tip:")])]),e._v(" Does your project include vendor libraries? Don't forget to exclude them from the analysis with the "),a("code",[e._v("--exclude")]),e._v(" option!")]),e._v(" "),a("p",[e._v("üí°  "),a("em",[a("strong",[e._v("Tip:")])]),e._v(" "),a("code",[e._v("--use-cc [compiler path]")]),e._v(' arguments are important because scan-build analyzes a project by interposing a "fake compiler" thus we need to tell it the one we normally use. If you are on OSX and using LLVM clang instead of the Apple one, make sure '),a("code",[e._v("--use-cc")]),e._v(" and "),a("code",[e._v("--use-cc++")]),e._v(" points to the binaries present in "),a("code",[e._v("/usr/local/opt/llvm/bin/")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"going-further"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#going-further"}},[e._v("#")]),e._v(" Going further")]),e._v(" "),a("p",[e._v("This article is just an introduction to "),a("code",[e._v("scan-build")]),e._v("! In fact, scan-build offers lots of options and could be customized for your project.")]),e._v(" "),a("ul",[a("li",[e._v("Looking for more checkers? Have a look at the "),a("a",{attrs:{href:"https://clang.llvm.org/docs/analyzer/checkers.html#experimental-checkers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Experimental Checkers"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Need a custom checkers? "),a("a",{attrs:{href:"http://clang-analyzer.llvm.org/checker_dev_manual.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Write your own"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Looking for advanced customization for your project? "),a("code",[e._v("scan-build --help")])])]),e._v(" "),a("h2",{attrs:{id:"closing-words"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closing-words"}},[e._v("#")]),e._v(" Closing Words")]),e._v(" "),a("p",[e._v("Happy bugs squashing!")]),e._v(" "),a("p",[e._v("If you enjoyed this article feel free to share it and tell me on "),a("a",{attrs:{href:"https://twitter.com/Antoine_hy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter"),a("OutboundLink")],1),e._v("! See you soon for another article üëã")])])}),[],!1,null,null,null);t.default=r.exports}}]);