(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{398:function(e,t,a){"use strict";a.r(t);var s=a(10),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"iwyu-vscode-integration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iwyu-vscode-integration"}},[e._v("#")]),e._v(" IWYU VSCode Integration")]),e._v(" "),a("p",[a("strong",[e._v("Include What You Use")]),e._v(" also known as "),a("a",{attrs:{href:"https://github.com/include-what-you-use/include-what-you-use",target:"_blank",rel:"noopener noreferrer"}},[e._v("IWYU"),a("OutboundLink")],1),e._v(", is an open-source clang-based tool for determining what include statements are needed in C/C++ files. Even if it's "),a("a",{attrs:{href:"https://github.com/include-what-you-use/include-what-you-use#how-to-correct-iwyu-mistakes",target:"_blank",rel:"noopener noreferrer"}},[e._v("not perfect"),a("OutboundLink")],1),e._v(", it's quite useful to clean headers in a new or a legacy project.")]),e._v(" "),a("p",[e._v("Now that you know everything about "),a("strong",[e._v("IWYU")]),e._v(", let's discover how to install this tool and integrate it into your VSCode setup.")]),e._v(" "),a("h2",{attrs:{id:"iwyu-installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iwyu-installation"}},[e._v("#")]),e._v(" IWYU Installation")]),e._v(" "),a("p",[e._v("First step, let's install the software.")]),e._v(" "),a("p",[e._v("You can either build it directly from the source or download it from your favorite package manager. For this tutorial let's download the pre-built binaries.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OSX")]),e._v("\nbrew "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" iwyu\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Linux")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y iwyu\n")])])]),a("h2",{attrs:{id:"compile-commands-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compile-commands-json"}},[e._v("#")]),e._v(" COMPILE_COMMANDS.json")]),e._v(" "),a("p",[a("strong",[e._v("IWYU")]),e._v(" requires the "),a("a",{attrs:{href:"https://sarcasm.github.io/notes/dev/compilation-database.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("compile_commands.json"),a("OutboundLink")],1),e._v(" file to determine unused includes. This file can be generated by your favorite build system generator, for example with CMake we just need to add "),a("code",[e._v("-DCMAKE_EXPORT_COMPILE_COMMANDS=1")]),e._v(" to our build command:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("cmake -H. -B build -DCMAKE_EXPORT_COMPILE_COMMANDS"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])]),a("p",[e._v("A "),a("code",[e._v("compile_commands.json")]),e._v(" should be generated in the build folder.")]),e._v(" "),a("h2",{attrs:{id:"clean-all-the-includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clean-all-the-includes"}},[e._v("#")]),e._v(" Clean All The Includes")]),e._v(" "),a("p",[a("strong",[e._v("IWYU")]),e._v(" comes with two Python scripts: "),a("code",[e._v("iwyu_tool.py")]),e._v(" and "),a("code",[e._v("fix_includes.py")]),e._v(". "),a("code",[e._v("iwyu_tool.py")]),e._v(" is meant to be run before "),a("code",[e._v("fix_includes.py")]),e._v(".")]),e._v(" "),a("p",[e._v("Run the command below in the build folder where the "),a("code",[e._v("compile_commands.json")]),e._v(" file is located. The command will generate the report of changes redirecting into the file iwyu.log.")]),e._v(" "),a("h3",{attrs:{id:"generate-iwyu-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generate-iwyu-log"}},[e._v("#")]),e._v(" Generate iwyu.log")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("iwyu_tool.py -p "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" iwyu.log\n")])])]),a("p",[e._v("Lots of options are available with "),a("strong",[e._v("IWYU")]),e._v(" like restricting the processing to a file, a folder, a regex... One can find them with the following command:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("iwyu_tool.py --help\n")])])]),a("h3",{attrs:{id:"cleaning-the-includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-the-includes"}},[e._v("#")]),e._v(" Cleaning the Includes")]),e._v(" "),a("p",[e._v("One can now clean the includes in their code base with the following command:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("fix_includes.py "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" iwyu.log\n")])])]),a("p",[e._v("⚠️ "),a("strong",[e._v("Important Note")]),e._v(": "),a("em",[e._v("This command can take a long time depending on the size of your project. One can speed-up the cleaning by adding concurrent sub-processes with the "),a("code",[e._v("-j")]),e._v(" arguments.")])]),e._v(" "),a("p",[e._v("Please also note that the command will use "),a("strong",[e._v("IWYU's")]),e._v(" default configuration. Some styling conventions are configurable like: include orders, namespace, etc. All those options can be found with "),a("code",[e._v("fix_includes --help")])]),e._v(" "),a("p",[e._v("💡 "),a("em",[e._v("Don't hesitate to check "),a("a",{attrs:{href:"https://github.com/include-what-you-use/include-what-you-use/tree/master/docs",target:"_blank",rel:"noopener noreferrer"}},[e._v("IWYU's official documentation"),a("OutboundLink")],1),e._v(" as well.")])]),e._v(" "),a("h2",{attrs:{id:"vscode-integration-cleaning-current-edited-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vscode-integration-cleaning-current-edited-file"}},[e._v("#")]),e._v(" VSCode Integration - Cleaning Current Edited File")]),e._v(" "),a("p",[e._v("Wouldn't that be great to have an IDE like action to clean the headers of the current file we are working on? Thanks to "),a("strong",[e._v("IWYU")]),e._v(" and VSCode tasks that's possible!")]),e._v(" "),a("h3",{attrs:{id:"iwyu-cleaning-one-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iwyu-cleaning-one-file"}},[e._v("#")]),e._v(" IWYU: Cleaning One File")]),e._v(" "),a("p",[a("strong",[e._v("IWYU")]),e._v(" also let's us the possiblity to clean one file with the following command:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("iwyu_tool.py -p "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("build_dir"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("path_to_file_to_clean"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" fix_includes.py\n")])])]),a("p",[e._v("Let's integrate this command into VSCode.")]),e._v(" "),a("h3",{attrs:{id:"vscode-task-to-clean-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vscode-task-to-clean-headers"}},[e._v("#")]),e._v(" VSCode: Task to Clean Headers")]),e._v(" "),a("p",[e._v("VSCode offers us the possibility to customize our dev workflow with the help of the "),a("code",[e._v("tasks.json")]),e._v(". Let's craft a simple VSCode task to clean the current file we are working on.")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"tasks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"shell"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"label"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Clean Current File Includes (IWYU)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"command"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"iwyu_tool.py -p build ${relativeFile} | fix_includes.py"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"presentation"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"reveal"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"always"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Used to show the progress of the command")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"options"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"cwd"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${workspaceRoot}"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Tell that the command should be ran from the opened workspace")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"version"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2.0.0"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("💡 "),a("em",[e._v("More information about task.json can be found on "),a("a",{attrs:{href:"https://code.visualstudio.com/docs/editor/tasks",target:"_blank",rel:"noopener noreferrer"}},[e._v("VSCode's doc"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("p",[e._v("This task assumes our "),a("code",[e._v("compile_commands.json")]),e._v(" file is located in the "),a("code",[e._v("build")]),e._v(" folder. If for your project the folder is located elsewhere, feel free to change it!")]),e._v(" "),a("p",[e._v("The task is quite simple to write thanks to the predefined VSCode's variable "),a("code",[e._v("${relativeFile}")]),e._v(". This variable holds the currently opened file path relative to the "),a("code",[e._v("workspaceFolder")]),e._v(", which is exactly what we needed.")]),e._v(" "),a("p",[e._v("All VSCode's predefined variables can be found "),a("a",{attrs:{href:"https://code.visualstudio.com/docs/editor/variables-reference",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"task-key-binding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-key-binding"}},[e._v("#")]),e._v(" Task Key Binding")]),e._v(" "),a("p",[e._v("Now, how to run quickly this new "),a("code",[e._v("task")]),e._v(" from VSCode?")]),e._v(" "),a("p",[e._v("Unfortunately, there is no default shortcut defined for the tasks, we will have to define one. Go to "),a("code",[e._v("Preferences > Keyboard Shortcuts")]),e._v(" and assign a key binding to the following key:")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[e._v("workbench.action.tasks.runTask\n")])])]),a("p",[e._v("For my OSX setup, I have set the shortcut to "),a("code",[e._v("⇧⌘T")]),e._v(" to stay consistent with the other VSCode shortcuts. When I hit "),a("code",[e._v("⇧⌘T")]),e._v(" it prompts the following:")]),e._v(" "),a("p",[a("img",{attrs:{src:"/img/iwyu.png",alt:"img"}})]),e._v(" "),a("p",[e._v("Sweet isn't it? You can now clean dusty headers directly from VSCode 😀.")]),e._v(" "),a("h2",{attrs:{id:"closing-words"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closing-words"}},[e._v("#")]),e._v(" Closing Words")]),e._v(" "),a("p",[e._v("If you enjoyed this article feel free to share it and tell me on "),a("a",{attrs:{href:"https://twitter.com/Antoine_hy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter"),a("OutboundLink")],1),e._v("!")]),e._v(" "),a("p",[e._v("See you soon for another article 👋")])])}),[],!1,null,null,null);t.default=n.exports}}]);